

++++++++++++++++++++++++++++++++++++++++++++++


Docker volumes
------------------
Docker containers are  ephemeral ( temporary )
Where as the data processed by the container should be permanent.

Generally, when a container is deleted all its data will be lost.
To preserve the data, even after deleting the container, we use volumes.

Volumes are of two types
1) Simple docker volumes
2) Docker volume containers ( Sharable volume )




Simple docker volumes
-----------------------------
These volumes are used only when we want to access the data, 
even after the container is deleted. 
But this data cannot be shared with other containers.



usecase
------------
1) Create a directory called /data ,  
start centos as container and mount /data as volume. 
Create files in mounted volume in centos container,
exit from the container and delete the container. Check if the files are still available.




Lets create a folder  with the name  
# mkdir  /data

# docker run --name c1 -it -v /data centos  ( v option is used to attach volume)

/var/lib/docker/volumes/7e3030c3538f7890b88de310498f3472c440f6d36b3fc56187a01c38f7e048b9/_data



# ls  ( Now, we can see the data folder also in the container)

# cd data
# touch file1   file2 
# ls
# exit  ( To come out of the container )
# docker inspect c1

We can see under mounts "data" folder it located in the host machine.
Copy the path
/var/lib/docker/volumes/3eb8ce06f76a8d64ae96f9904d06e258089d4666d6ecfcea79d29abe7b52f000/_data

Now, lets delete te container
# docker rm -f c1

After deleting the container, lets go to the location of the data folder

# cd /var/lib/docker/volumes/d867766f70722eaf8cba651bc1d64c60e9f49c5b1f1ebb9e781260f777f3c7e8/_data

# ls  ( we can see file1  file2 )

( Observe , the container is deleted but still  the data is persistant )




+++++++++++++

docker volume containers
-------------------------------
These are also known as reusable volume.
The volume used by one container can be shared with other containers.
Even if all the containers are deleted, data will still be available on the docker host.

Ex:

# sudo su -

Lets create a directory      /data
# mkdir  /data 

Lets Start  centos as container 
#  docker run --name  c1  -it  -v /data centos 
# ls  ( we can see the list of files and dir in centos )


# cd data
# ls  ( currently we have no files )

Lets create  some files
# touch file1  file2  ( These two files are available in c1 container)

Comeout of the container without exit
# Ctrl +p  Ctrl +q  ( container will still runs in background )


Lets Start another  centos as container ( c2 container should use the same volume as c1)
#  docker run --name  c2  -it  --volumes-from c1  centos 

/var/lib/docker/volumes/b5b7dc10cf867dd7ba384c07f1b5af093387c1923ea6982509d064777395b124/_data

# cd data
# ls  ( we can see the files created by c1 )

Lets create some more files
# touch file3  file4
# ls  ( we see 4 files )

Comeout of the container without exit
# Ctrl +p  Ctrl +q  ( container will still runs in background )

Lets Start another  centos as container
#  docker run --name  c3  -it  --volumes-from c2 centos 



# cd data
# ls  ( we can see 4 files )
# touch file5  file6
# ls

Comeout of the container without exit
# Ctrl +p  Ctrl +q  ( container will still runs in background )

Now, lets connect to any container which is running in the background
# docker attach  c1
#  ls  ( you can see all the files )
# exit

Identify the mount location
$ docker inspect  c1
( search for the mount section )

Take a note of the source path

cd /var/lib/docker/volumes/ec25a54a62ffa3ce625c83a847624251098f8e16dd570d8faa6a29295e8b6c7e/_data

Lets remove all the container
# docker rm -f  c1  c2  c3

Lets go to the source path

# cd /var/lib/docker/volumes/e22a9b39372615727b964151b6c8108d6c02b13114a3fcce255df0cee7609e15/_data

cd /var/lib/docker/volumes/784ff672496b15f1b751ae939351373696d4547f87eee2608e40789f1df22f3a/_data
# ls  ( we can see all the files )

+++++++++++++++++++++++++++++++++++++++++++++++++++



